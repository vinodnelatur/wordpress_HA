Parameters:
    EnvType: 
      Description: Environment type.
      Default: test
      Type: String
      AllowedValues: 
        - prod
        - test
      ConstraintDescription: must specify prod or test.
    
Conditions: 
  Prod: !Equals [ !Ref EnvType, prod ]
  
Resources:
    MyVpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: True
        EnableDnsHostnames: True
    InternetGateway:
       Type: AWS::EC2::InternetGateway
       Properties:
        Tags:
         - Key: Application
           Value: !Ref 'AWS::StackId'
    Subnet1:
      Type: AWS::EC2::Subnet
      Description: Create Subnet1 for placing EC2 server1
      Properties:
        VpcId: !Ref MyVpc
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "ap-southeast-2a"
        Tags:
         - Key: "Cloudformation StackId"
           Value: !Ref 'AWS::StackId'
    Subnet2:
      Type: AWS::EC2::Subnet
      Description: Create Subnet2 for placing EC2 server2
      Condition: Prod
      Properties:
        VpcId: !Ref MyVpc
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: "ap-southeast-2b"
        Tags:
          - Key: "Application"
            Value: !Ref 'AWS::StackId'
    AttachGateway:
       Type: AWS::EC2::VPCGatewayAttachment
       Properties:
        VpcId: !Ref MyVpc
        InternetGatewayId: !Ref InternetGateway
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref 'AWS::StackId'
    Route:
      Type: AWS::EC2::Route
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref InternetGateway
    Subnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref Subnet1
        RouteTableId: !Ref RouteTable
    Subnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: Prod
      Properties:
        SubnetId: !Ref Subnet2
        RouteTableId: !Ref RouteTable
    NetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref "AWS::StackId"
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '80'
        To: '80'
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'true'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '80'
        To: '80'
    Subnet1NetworkAclAssociation:
       Type: AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId: !Ref Subnet1
         NetworkAclId: !Ref NetworkAcl
    Subnet2NetworkAclAssociation:
       Type: AWS::EC2::SubnetNetworkAclAssociation
       Condition: Prod
       Properties:
         SubnetId: !Ref Subnet2
         NetworkAclId: !Ref NetworkAcl

Outputs:
    Subnet1:
        Value: !Ref Subnet1
    Subnet2:
        Condition: Prod
        Value: !Ref Subnet2
