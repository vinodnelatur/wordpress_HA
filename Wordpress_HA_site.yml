Parameters:
    KeyPair:
      Description: Use this keypair to SSH into the instances
      Type: AWS::EC2::KeyPair::KeyName    
    Subnets:
      Type: "List<AWS::EC2::Subnet::Id>"
      Description: "The list of SubnetIds in a VPC" 
    DBNAME:
      AllowedPattern: ^([a-zA-Z0-9]*)$
      Type: String
    DBUSER:
      AllowedPattern: ^([a-zA-Z0-9]*)$
      Type: String
    DBPASS:
      AllowedPattern: ^([a-zA-Z0-9]*)$
      Type: String
Resources:
    MyVpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: True
        EnableDnsHostnames: True
    InternetGateway:
       Type: AWS::EC2::InternetGateway
       Properties:
        Tags:
         - Key: Application
           Value: !Ref 'AWS::StackId'
    Subnet1:
      Type: AWS::EC2::Subnet
      Description: Create Subnet1 for placing EC2 server1
      Properties:
        VpcId: !Ref MyVpc
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "ap-southeast-2a"
        Tags:
         - Key: "Cloudformation StackId"
           Value: !Ref 'AWS::StackId'
    Subnet2:
      Type: AWS::EC2::Subnet
      Description: Create Subnet2 for placing EC2 server2
      Properties:
        VpcId: !Ref MyVpc
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: "ap-southeast-2b"
        Tags:
          - Key: "Application"
            Value: !Ref 'AWS::StackId'
    AttachGateway:
       Type: AWS::EC2::VPCGatewayAttachment
       Properties:
        VpcId: !Ref MyVpc
        InternetGatewayId: !Ref InternetGateway
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref 'AWS::StackId'
    Route:
      Type: AWS::EC2::Route
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref InternetGateway
    SubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref Subnet1
        RouteTableId: !Ref RouteTable
    NetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref "AWS::StackId"
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '80'
        To: '80'
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'true'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '80'
        To: '80'
    Subnet1NetworkAclAssociation:
       Type: AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId: !Ref Subnet1
         NetworkAclId: !Ref NetworkAcl
    Subnet2NetworkAclAssociation:
       Type: AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId: !Ref Subnet2
         NetworkAclId: !Ref NetworkAcl
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http & ssh to client host
        VpcId: !Ref MyVpc
        SecurityGroupIngress:
           - IpProtocol: tcp
             FromPort: 80
             ToPort: 80
             SourceSecurityGroupId: !Ref ApplicationLoadBalancer
           - IpProtocol: tcp
             FromPort: 22
             ToPort: 22
             CidrBlock: 10.0.0.0/16
    ApplicationLoadBalancer:
       Type: AWS::ElasticLoadBalancingV2::LoadBalancer
       Properties:
         SubnetMappings:
           - !GetAtt Subnet1
             !GetAtt Subnet2
    ALBListener:
       Type: AWS::ElasticLoadBalancingV2::Listener
       Properties:
         DefaultActions:
           - Type: forward
             TargetGroupArn:
                Ref: ALBTargetGroup
         LoadBalancerArn:
            Ref: ApplicationLoadBalancer
         Port: '80'
         Protocol: HTTP
    ALBTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        Port: 80
        Protocol: HTTP
        VpcId: !Ref MyVpc
    AwsMysqlDb:
      Type: AWS::RDS::DBInstance
      Properties:
          DB_NAME: !Ref DBNAME
          DBInstanceClass: "db.m1.small"
          Engine: "MySQL"
          EngineVersion: "5.6.13"
          MasterUsername: !Ref DBUSER
          MasterUserPassword: !Ref DBPASS
          MultiAZ: 1
    AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier: !Ref Subnets 
        LaunchConfigurationName: !Ref LaunchConfig
        MinSize: 2
        MaxSize: 6
        TargetGroupARNs: !Ref ALBTargetGroup
    LaunchConfig:
       Type: AWS::AutoScaling::LaunchConfiguration
       Properties:
         InstanceType: t2.micro
         ImageId: ami-67589505
         KeyName: !Ref KeyPair
         SecurityGroups: !Ref InstanceSecurityGroup
         UserData:
           Fn::Base64:
              !Sub |
                 #!/bin/bash -xe
                 #Install and setup Wordpress
                 #Install Apache
                 sudo yum install httpd
                 #Install PHP
                 yum install php php-mysql
                 sudo service httpd start
                 #Install wordpress
                 cd /var/www/html
                 wget http://wordpress.org/latest.tar.gz
                 tar -xzvf latest.tar.gzcd
                 #Create the config file
                 mv wp-config-sample.php wp-config.php
                 #Add the DB params
                 sed -i '$ a \#Database params\n "define(‘DB_NAME’,!Ref DBNAME}" \n "define(‘DB_USER’, !Ref DBUSER)" \n "define(‘DB_PASSWORD’, !Ref DBPASS)" \n "define(‘DBHOST’, !GetAtt AwsMysqlDb.Endpoint.Address)"\n' wp-config.php
                 